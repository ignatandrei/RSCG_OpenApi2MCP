@inherits RazorBlade.HtmlTemplate<RSCG_OpenApi2MCP.FunctionsToGenerate>;

///number of functions : @Model.Count
namespace OpenApi2MCP;
[ModelContextProtocol.Server.McpServerToolType]
public static class MCPTools_@(Model.Name){

    static System.String[] adresses=[];
    public static void SetAdresses(params System.String[] adress){
        adresses=  adress;
        foreach(var item in adresses){
            System.Net.Http.HttpClient client= new();
            client.BaseAddress= new System.Uri(item);
            httpClients.Add(item,client);
        }
    }
    static Dictionary<string,System.Net.Http.HttpClient > httpClients=[];
    private static System.Net.Http.HttpClient preferred(){
        if(httpClients.Count==0){
          throw new System.Exception("No address set");
        }
        if(httpClients.Count==1){
            return httpClients.First().Value;
        }
        var secure = httpClients.Where(x => x.Value.BaseAddress.Scheme == "https").ToArray();
    
        if(secure.Length>0)
            return secure[0].Value;

    return httpClients.First().Value;

    }

@foreach (var fct in Model.functions){
    <text>

        /// @fct.FullDisplayName
        [ModelContextProtocol.Server.McpServerTool,System.ComponentModel.Description("@fct.Description")]
            public static async Task<string>
                @(fct.FuncName)  ( @(fct.ParamFunction()) ){
            var client= preferred();
                Console.WriteLine(client.BaseAddress);
                var url = $"@(fct.UrlWithParameters)";
                //add query string
                url += $"@(fct.QueryString())";
                // Console.WriteLine("calling url: " + url);

                @{
                switch (fct.operationType)
                {
                    case Microsoft.OpenApi.Models.OperationType.Get:
                        <text>
                        var response = await client.GetAsync(url);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            throw new System.Exception($"Error: {response.StatusCode}");
                        }
                        
                        </text>
                        break;
                    case Microsoft.OpenApi.Models.OperationType.Post:
                        <text>
                            var response = await client.PostAsJsonAsync(url, body);
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync();
                            }
                            else
                            {
                                throw new System.Exception($"Error: {response.StatusCode}");
                            }

                        </text>
                        break;
                    default:
                        <text>
                            //todo: handle @(fct.operationType)
                        </text>
                        break;
                        
                        
                }
            }
            return "";
        } 

    </text>
}

}